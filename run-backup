#!/bin/sh
#
# run-backup - Backup script using rdiff-backup
#
# Copyright (c) 2014 Roland Seubert
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, inclUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

author="Roland Seubert"
year="2014"
version="0.7"

progname="$(basename "$0")"
configfile="${HOME}/.${progname}.conf"
logfile="${HOME}/.${progname}.log"

configtemplate="# ${progname} - configuration file

# Files and directories included in the backup
include=%s

# Files and directories excluded from the backup
exclude=%s

# Destination directory
destination=%s"

helpmsg()
{
    # Prints a help message to stdout
    #
    # Arguments:
    #   Script name
    #
    # Return values:
    #   Help message
    cat <<-EOF
	Usage: "${1}" [-c] [-h] [-v] [-i DIR] [-e DIR] [-d DIR]

	Options:
	  -c  Run interactive configuration and exit
	  -d  Destination directory
	  -e  Exclude files and directories
	  -h  Display this help message and exit
	  -i  Include files and directories
	  -l  List previous backup increments and exit
	  -v  Display version information and exit

	For complete documentation, see file README
	EOF
}

lsinc()
{
    # Returns a numbered listing of past backup increments
    #
    # Arguments:
    #   Absolute path to destination (default: none)
    #   Absolute path to temporary directory (default: none)
    #
    # Return values:
    #   Listing of backup increments
    if [ "$#" -ne 2 ]
    then
        exit 1
    fi

    YYYY='[[:digit:]]\{4\}'
    MM='[[:digit:]]\{2\}'
    MMM='[[:alpha:]]\{3\}'
    DD='[[:digit:]]\{2\}'
    ddd='[[:alpha:]]\{3\}'
    hh='[[:digit:]]\{2\}'
    mm='[[:digit:]]\{2\}'
    ss='[[:digit:]]\{2\}'
    fmtlabel="${ddd} ${MMM} ${DD} ${hh}:${mm}:${ss} ${YYYY}"
    fmttimestamp="${YYYY}-${MM}-${DD}T${hh}:${mm}:${ss}[+-]${hh}:${mm}"

    input="$(rdiff-backup --list-increments "$1")"
    current="$(printf "$input" | tail -n 1 | sed -n "s/^.*\(${fmtlabel}\).*$/\\1/p")"
    previous="$(printf "$input" | head -n -1 | tail -n +2 | sed '1!G;h;$!d')"

    printf "Most recent backup:\n\t%s\n" "$current"
    printf "Previous backups:\n"

    i=1
    printf "%s\n" "$previous" | while read line
    do
        label="$(printf "$line" | sed -n "s/^.*\(${fmtlabel}\).*$/\\1/p")"
        timestamp="$(printf "$line" | sed -n "s/^.*\(${fmttimestamp}\).*$/\\1/p")"

        printf "  %s\t" "$i"
        mkdir "${2}/$i"
        printf "%s\n" "$label" | tee "${2}/${i}/label"
        printf "$timestamp" >"${2}/${i}/timestamp" 2>&1

        i=$(($i+1))
    done
}

mktempdir()
{
    # Creates a temporary directory in TMPDIR
    #
    # Arguments:
    #   Basename of temporary directory (default: none)
    #
    # Return values:
    #   Full path of temporary directory
    suffix="$(cat /dev/urandom | tr -cd [:alnum:] | head -c 16)"
    tempdir="${TMPDIR:-"/tmp"}/${1}-${suffix}"
    if [ -d "$tempdir" ]
    then
        printf "Could not create temporary directory\n" >&2
        exit 1
    else
        (umask 077 && mkdir "$tempdir")
        printf "$tempdir"
    fi
}

readconf()
{
    # Reads the configuration file and assigns values to variables
    #
    # Arguments:
    #   Full path and name of configuration file (default: none)
    #
    # Return values:
    #   None
    while read line
    do
        if [ "$(printf "$line" | cut -c 1)" = "#" ]
        then
            continue
        fi
        key="$(printf "$line" | sed -n 's/^\([a-z]\+\)=.\+$/\1/p')"
        value="$(printf "$line" | sed -n 's/^[a-z]\+=\(.\+\)$/\1/p')"
        case "$key" in
            destination)
                dest="$value"
                ;;
            exclude)
                excl="$value"
                ;;
            include)
                incl="$value"
                ;;
        esac
    done < "$1"
}

busy()
{
    # Displays a spinning bar animation
    #
    # Arguments:
    #   Process ID of background action
    #
    # Return values:
    #   Spinning bar animation
    setterm -cursor off
    steps='|/-\'
    while kill -0 "$1" 2>/dev/null
    do
        for pos in 1 2 3 4
        do
            printf "\b%s" "$(expr substr "$steps" "$pos" 1)"
            sleep .15
        done
    done
    setterm -cursor on
}

writeconf()
{
    # Interactively writes configuration to file
    #
    # Arguments:
    #   Full path and name of configuration file (default: none)
    #
    # Return values:
    #   None
    printf "Included files and directories%s: " "${incl:+" [${incl}]"}"
    read incl_update
    incl="${incl_update:-"$incl"}"
    printf "Excluded files and directories%s: " "${excl:+" [${excl}]"}"
    read excl_update
    excl="${excl_update:-"$excl"}"
    printf "Destination directory%s: " "${dest:+" [${dest}]"}"
    read dest_update
    dest="${dest_update:-"$dest"}"
    if [ -f "$1" ]
    then
        mv -f "$1" "${1}.bak"
    fi
    printf "${configtemplate}\n" "$incl" "$excl" "$dest" >"$1" 2>&1
}

printf "Backup started by %s on %s\n" "$USER" "$(date)" >"$logfile" 2>&1

# Read configuration if found
if [ -f "$configfile" ]
then
    readconf "$configfile"
fi

# Process command-line options
while getopts ":cd:e:hi:lr:v" OPTS
do
    case "$OPTS" in
        c)
            writeconf "$configfile" && printf "Configuration successful\n"
            exit 0
            ;;
        d)
            dest="$OPTARG"
            ;;
        e)
            excl="$OPTARG"
            ;;
        h)
            helpmsg "${progname}"
            exit 0
            ;;
        i)
            incl="$OPTARG"
            ;;
        l)
            if [ -n "$dest" ]
            then
                tempdir="$(mktempdir "$progname")"
                lsinc "$dest" "$tempdir"
                exit 0
            else
                printf "No destination specified for lookup\n" >&2
                exit 1
            fi
            ;;
        r)
            if [ -n "$dest" ]
            then
                rdiff-backup --remove-older-than "$OPTARG" "$dest" && \
                    printf "Increment successfully deleted\n"
                exit 0
            else
                printf "No destination specified for removal\n" >&2
                exit 1
            fi
            ;;
        v)
            printf "%s %s\nCopyright (c) %s %s\n" \
                "$progname" "$version" "$year" "$author"
            exit 0
            ;;
        :)
            printf "Option %s requires an argument\n" "-$OPTARG" >&2
            exit 1
            ;;
        \?)
            printf "Unknown option: %s\n" "-$OPTARG" >&2
            exit 1
            ;;
    esac
done

# Check inputs
if [ -z "$incl" ]
then
    printf "No files or directories specified for backup\n" >&2
    exit 1
elif [ -z "$dest" ]
then
    printf "No destination specified for backup\n" >&2
    exit 1
elif [ ! -d "$dest" ]
then
    while [ "$choice" != "y" -a "$choice" != "Y" ]
    do
        printf "Destination does not exist and will be created [Y/n]: "
        read choice
        choice="${choice:-"y"}"
        if [ "$choice" = "n" -o "$choice" = "N" ]
        then
            printf "Aborting backup\n"
            exit 0
        fi
    done
elif [ -d "$dest" -a ! -w "$dest" ]
then
    printf "No write permission at destination\n" >&2
    exit 1
fi

# Process included and excluded directories
dirlist="- ${dest}\n"
TMPIFS="$IFS"
IFS=":"
if [ -n "$excl" ]
then
    for dir in $excl
    do
        dirlist="${dirlist}- ${dir}\n"
    done
fi
for dir in $incl
do
    dirlist="${dirlist}+ ${dir}\n"
done
IFS="$TMPIFS"
dirlist="${dirlist}- **\n"
tempdir="$(mktempdir "${progname}")"
printf %b "$dirlist" >"${tempdir}/dir.list" 2>&1

# Run backup
printf "Running backup ...  "
spinner &
pid="$!"
trap 'kill "$pid"' TERM
rdiff-backup \
    --include-globbing-filelist "${tempdir}/dir.list" \
    / \
    "${dest}" >"$logfile" 2>"$logfile"
kill "$pid" && printf "\bdone\n"
exit 0

